name: C/C++ debug ubuntu-GTK3

on:
  push:
    branches:
      - debug_ubuntu

jobs:
  build:

    runs-on: ubuntu-18.04
    
    env:
      EXEC_NAME: "${{ github.event.repository.name }}"
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: echo "$GITHUB_CONTEXT"
    - uses: actions/checkout@v2
      with:
        ref: 'debug_ubuntu'
    - id: lowercase_repo
      uses: ASzc/change-string-case-action@v1
      with:
        string: ${{ github.event.repository.name }}
    - name: set exec name
      if: ${{ github.event.repository.name != 'Slic3r' }}
      env:
        EXEC_NAME: "${{ steps.lowercase_repo.outputs.lowercase }}"
      run: echo "current exec name is -> ${{ env.EXEC_NAME }}"
    - name: update submodule profiles
      working-directory: ./resources/profiles
      run: git submodule update --init
    - name: change date in version
      run: sed -i "s/+UNKNOWN/_$(date '+%F')/" version.inc
    - name: update clock
      run: sudo hwclock -s
    - name: update apt
      run: sudo apt update
    - name: install gtk2 glew
      run: sudo apt install libgtk-3-dev libglew-dev libudev-dev libdbus-1-dev
    - name: mkdir in deps
      run: mkdir deps/build
    - name: cmake deps
      working-directory: ./deps/build
      run: cmake .. -DDEP_WX_GTK3=ON -DCMAKE_BUILD_TYPE=Debug
    - name: make deps
      working-directory: ./deps/build
      run: make
    - name: ls libs
      working-directory: ./deps/build
      run: ls ./destdir/usr/local/lib
    - name: rename wxscintilla
      working-directory: ./deps/build/destdir/usr/local/lib
      run: cp libwxscintilla-3.1.a libwx_gtk3u_scintilla-3.1.a
    - name: clean deps
      working-directory: ./deps/build
      run: rm -rf dep_*
    - name: mkdir build
      run: mkdir build
    - name: cmake
      working-directory: ./build
      run: cmake .. -DSLIC3R_GTK=3 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH="/home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/deps/build/destdir/usr/local" -DSLIC3R_STATIC=1
    - name: make ${{ github.event.repository.name }}
      working-directory: ./build
      run: make Slic3r
    - name: make .mo
      working-directory: ./build
      run: make gettext_po_to_mo
    - name: create directory and copy into it
      working-directory: ./build
      run: |
        mkdir package
        mkdir package/bin
    - name: copy resources
      working-directory: ./build
      run: cp -Rf ../resources package/resources
    - name: copy bin
      working-directory: ./build
      run: cp -f src/${{ env.EXEC_NAME }} package/bin/${{ env.EXEC_NAME }}
    - name: create sh from echo
      working-directory: ./build/package
      run: |
        echo -e '#!/bin/bash\nDIR=$(readlink -f "$0" | xargs dirname)\nexport LD_LIBRARY_PATH="$DIR/bin"\nexec "$DIR/bin/${{ env.EXEC_NAME }}" "$@"' >${{ env.EXEC_NAME }}
        chmod u+x ${{ env.EXEC_NAME }}
        tar -cvf ../${{ github.event.repository.name }}.tar .
    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: nightly_linux.tar
        path: build/${{ github.event.repository.name }}.tar
    - name: build appimage
      working-directory: ./build/package
      run: |
        chmod +x ../build_appimage.sh
        ../build_appimage.sh
    - name: 'Tar files'
      working-directory: ./build/package
      run: tar -cvf ${{ github.event.repository.name }}_ubu64.AppImage.tar ${{ github.event.repository.name }}_ubu64.AppImage
    - name: Upload appimage
      uses: actions/upload-artifact@v1.0.0
      with:
        name: ${{ github.event.repository.name }}-AppImage.tar
        path: build/package/${{ github.event.repository.name }}_ubu64.AppImage.tar
        
